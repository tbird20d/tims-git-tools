#!/usr/bin/python
#
# Copyright (C) 2018 Sony Corporation
#
# multi-replace - read a list of replacement strings from a file,
# and replace those in data read from stdin, outputting the
# data to standard out
# 
# One use of this is to replace e-mail strings in output from
# git log or author-stats, with other strings, to consolidate
# the strings for counting purposes.  
#
#

import sys
import os
import subprocess

def usage():
   print("""Usage: multi-replace <replacement-file>

Where replacement-file is a file with a list of replacements,
one-per-line, of the format:
original text:->:new text

<replacement-file> is a filename or path.  It is searched for
in the current directory, the top directory of the current
git repository (if any), or the location of the multi-replace
program.
""")
   sys.exit(0)

if "-h" in sys.argv:
    usage()


if len(sys.argv) < 2:
    print("Error: missing <replacement-file> argument (required)")
    usage()

rfile = sys.argv[1]
rfile_path = None

# rfile can be a path, or a filename that we look for in various
# locations.  The locations are:
# 1) the root of the git tree
# 2) wherever multi-replace ran from
# 3) Tim's home bin directory
if os.path.exists(rfile):
    rfile_path = rfile

if not rfile_path:
    cmd = ['git', 'rev-parse', '--show-toplevel']
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    git_top_dir = proc.stdout.read()
    git_rfile_path = git_top_dir + os.sep + rfile
    if os.path.exists(git_rfile_path):
        rfile_path = git_rfile_path

if not rfile_path:
    multi_src_path = os.path.dirname(os.path.abspath(sys.argv[0]))
    multi_rfile_path = multi_src_path + os.sep + rfile
    if os.path.exists(multi_rfile_path):
        rfile_path = multi_rfile_path

if not rfile_path:
    tims_home_bin = "/home/tbird/bin"
    tims_rfile_path = time_home_bin + os.sep + rfile
    if os.path.exists(tims_rfile_path):
        rfile_path = tims_rfile_path

if not rfile_path:
    print("Error: Cannot file replacement file '%s'" % rfile)
    usage()

# parse replacement file into a list of tuples
#print("Using replacement-file '%s'" % rfile_path)
repl_list = open(rfile_path).readlines()

rlist = []
for line in repl_list:
    if line.strip().startswith("#"):
        continue
    if ":->:" not in line:
        print("Error: unknown replacement line format: '%s'" % line)
    rlist.append(line.strip().split(":->:", 1))

#print "rlist=%s" % rlist

for line in sys.stdin:
    #print "line=", line
    for r in rlist:
        line = line.replace(r[0],r[1])
    #print "new_line=", line
    sys.stdout.write(line)
